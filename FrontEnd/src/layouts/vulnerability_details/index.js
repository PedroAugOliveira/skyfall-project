// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";

// Material Dashboard 2 React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDBadge from "components/MDBadge";

// Material Dashboard 2 React example components
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";


// Data
import withAuth from "./withAuth";

import { useTranslation } from 'react-i18next';


function Vulnerability_Details() {

  const { t } = useTranslation();

  return (
    <DashboardLayout>
      <DashboardNavbar />
      <MDBox pt={6} pb={3}>
        <Grid container spacing={6}>
          <Grid item xs={12}>
          <Card>
            <MDBox
              mx={2}
              mt={-3}
              py={3}
              px={2}
              variant="gradient"
              bgColor="info"
              borderRadius="lg"
              coloredShadow="info"
            >
              <MDTypography variant="h6" color="white">
                {t('SQL Injection')}
              </MDTypography>      
            </MDBox>
            <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('What is SQL Injection?')}</h5>
            <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
              {t('SQL injection (SQLi) is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application\'s content or behavior.')}
            </h6>
            <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('What is Union Based SQLi?')}</h5>
            <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
              {t('In the Union Based SQLi, the attacker uses the UNION operator to combine a benign SQL statement with a malicious statement. The malicious statement must use the same columns and data types as the original statement. A vulnerable database processes the combined statement and executes the malicious code.')}
            </h6>
            <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('What is Blind SQLi?')}</h5>
            <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
              {t('Blind SQLi is a type of SQL Injection attack that asks the database true or false questions and determines the answer based on the application\'s response. This attack is often used when the web application is configured to show generic error messages, but has not mitigated the code that is vulnerable to SQL injection. When an attacker exploits SQL injection, sometimes the web application displays error messages from the database complaining that the SQL Query’s syntax is incorrect. Blind SQL injection is nearly identical to normal SQL Injection, the only difference being the way the data is retrieved from the database. When the database does not output data to the web page, an attacker is forced to steal data by asking the database a series of true or false questions. This makes exploiting the SQL Injection vulnerability more difficult, but not impossible.')}
            </h6>
            <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('Vulnerability Classifications')}</h5>
            <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
              <ul>
                <a href="https://cwe.mitre.org/data/definitions/89.html" target="_blank" style={{listStyle:"none", color:"black"}}><li>{t('CWE-89: Improper Neutralization of Special Elements used in an SQL Command (\'SQL Injection\')')}</li></a>
                <a href="https://cwe.mitre.org/data/definitions/94.html" style={{listStyle:"none", color:"black"}}><li>{t('CWE-94: Improper Control of Generation of Code (\'Code Injection\')')}</li></a>
                <a href="https://cwe.mitre.org/data/definitions/116.html" style={{listStyle:"none", color:"black"}}><li>{t('CWE-116: Improper Encoding or Escaping of Output')}</li></a>
                <a href="https://capec.mitre.org/data/definitions/66.html" style={{listStyle:"none", color:"black"}}><li>{t('CAPEC-66: SQL Injection')}</li></a>
              </ul>
            </h6>
            <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('Typical Severity')}</h5>
            <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
              <MDBox ml={-1}>
                <MDBadge badgeContent={t("High")} color="error" variant="gradient" size="lg"/>
              </MDBox>
            </h6>
            <MDBox pt={3}>
            </MDBox>
          </Card>
          </Grid>
          <Grid item xs={12}>
            <Card>
              <MDBox
                mx={2}
                mt={-3}
                py={3}
                px={2}
                variant="gradient"
                bgColor="info"
                borderRadius="lg"
                coloredShadow="info"
              >
                <MDTypography variant="h6" color="white">
                  Cross-Site Scripting
                </MDTypography>
              </MDBox>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}> { t('What is Cross-Site Scripting (XSS)?') }</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
              { t('Cross site scripting (XSS) is a common attack vector that injects malicious code into a vulnerable web application. XSS differs from other web attack vectors (e.g., SQL injections), in that it does not directly target the application itself. Instead, the users of the web application are the ones at risk. A successful cross site scripting attack can have devastating consequences for an online business’s reputation and its relationship with its clients. Depending on the severity of the attack, user accounts may be compromised, Trojan horse programs activated and page content modified, misleading users into willingly surrendering their private data. Finally, session cookies could be revealed, enabling a perpetrator to impersonate valid users and abuse their private accounts. Cross site scripting attacks can be broken down into two types: stored and reflected.') }
              </h6>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}> { t('What is Reflected XSS?') }</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
              { t('Reflected cross-site scripting (or non-persistent XSS) arises when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way. Suppose a website has a search function which receives the user-supplied search term in a URL parameter: https://insecure-website.com/search?term=gift The application echoes the supplied search term in the response to this URL: <emp>"You searched for: gift"</emp>. Assuming the application doesn\'t perform any other processing of the data, an attacker can construct an attack like this: https://insecure-website.com/search?term=<script>/*+Bad+stuff+here...+*/</script> This URL results in the following response: "You searched for: Bad stuff here..." If another user of the application requests the attacker\'s URL, then the script supplied by the attacker will execute in the victim user\'s browser, in the context of their session with the application.') }
              </h6>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('What is Stored XSS?')}</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
              { t('The most damaging type of XSS is Stored XSS (Persistent XSS). An attacker uses Stored XSS to inject malicious content (referred to as the payload), most often JavaScript code, into the target application. If there is no input validation, this malicious code is permanently stored (persisted) by the target application, for example within a database. For example, an attacker may enter a malicious script into a user input field such as a blog comment field or in a forum post. When a victim opens the affected web page in a browser, the XSS attack payload is served to the victim’s browser as part of the HTML code (just like a legitimate comment would). This means that victims will end up executing the malicious script once the page is viewed in their browser.') }
              </h6>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('Vulnerability Classifications')}</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
                <ul>
                  <a href="https://cwe.mitre.org/data/definitions/79.html" target="_blank" style={{listStyle:"none", color:"black"}}><li>{ t('CWE-79: Improper Neutralization of Input During Web Page Generation (\'Cross-site Scripting\')') }</li></a>
                  <a href="https://cwe.mitre.org/data/definitions/80.html" style={{listStyle:"none", color:"black"}}><li>{ t('CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (\'Basic XSS\')') }</li></a>
                  <a href="https://cwe.mitre.org/data/definitions/83.html" style={{listStyle:"none", color:"black"}}><li>{ t('CWE-83: Improper Neutralization of Script in Attributes in a Web Page') }</li></a>
                  <a href="https://capec.mitre.org/data/definitions/63.html" style={{listStyle:"none", color:"black"}}><li>{ t('CAPEC-63: Cross-site Scripting (XSS)') }</li></a>
                </ul>
              </h6>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('Typical Severity')}</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
               <MDBox ml={-1}>
                <MDBadge badgeContent={t("High")} color="error" variant="gradient" size="lg"/>
               </MDBox>
              </h6>
              <MDBox pt={3}>
                {/* <DataTable
                  table={{ columns: pColumns, rows: pRows }}
                  isSorted={false}
                  entriesPerPage={false}
                  showTotalEntries={false}
                  noEndBorder
                /> */}
              </MDBox>
            </Card>
          </Grid>
          <Grid item xs={12}>
            <Card>
              <MDBox
                mx={2}
                mt={-3}
                py={3}
                px={2}
                variant="gradient"
                bgColor="info"
                borderRadius="lg"
                coloredShadow="info"
              >
                <MDTypography variant="h6" color="white">
                  {t('Open Redirect Vulnerability')}
                </MDTypography>
              </MDBox>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('What is Open Redirect Vulnerability?')}</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
              { t('An open redirect vulnerability occurs when an application allows a user to control a redirect or forward to another URL. If the app does not validate untrusted user input, an attacker could supply a URL that redirects an unsuspecting victim from a legitimate domain to an attacker’s phishing site. Attackers exploit open redirects to add credibility to their phishing attacks. Most users see the legitimate, trusted domain, but do not notice the redirection to the phishing site. Although this vulnerability doesn’t always directly impact the legitimate application, the company\'s reputation can be negatively impacted. In addition, open redirects may not seem like a high impact on the organization itself, it’s important to avoid damaging the trust users have in the business. It’s worth noting, an open redirect in your own site may very well be used against your own employees!') }
              </h6>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('Vulnerability Classifications')}</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
                <ul>
                <a href="https://cwe.mitre.org/data/definitions/601.html" target="_blank" style={{listStyle:"none", color:"black"}}><li>{t('CWE-601: URL Redirection to Untrusted Site (\'Open Redirect\')')}</li></a>
                </ul>
              </h6>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('Typical Severity')}</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
               <MDBox ml={-1}>
                <MDBadge badgeContent={t("Low")} color="success" variant="gradient" size="lg"/>
               </MDBox>
              </h6>
              <MDBox pt={3}>
                {/* <DataTable
                  table={{ columns: ORColumns, rows: ORRows }}
                  isSorted={false}
                  entriesPerPage={false}
                  showTotalEntries={false}
                  noEndBorder
                /> */}
              </MDBox>
            </Card>
          </Grid>
          <Grid item xs={12}>
            <Card>
              <MDBox
                mx={2}
                mt={-3}
                py={3}
                px={2}
                variant="gradient"
                bgColor="info"
                borderRadius="lg"
                coloredShadow="info"
              >
                <MDTypography variant="h6" color="white">
                  {t('XML External Entity')}
                </MDTypography>
              </MDBox>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('What is XML External Entity (XXE)?')}</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
              { t('XML external entity (XXE) injection vulnerabilities arise when applications process user-supplied XML documents without disabling references to external resources. XML parsers typically support external references by default, even though they are rarely required by applications during normal usage. External entities can reference files on the parser\'s filesystem; exploiting this feature may allow retrieval of arbitrary files, or denial of service by causing the server to read from a file such as /dev/random. External entities can often also reference network resources via the HTTP protocol handler. The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.') }
             </h6>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('Vulnerability Classifications')}</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
                <ul>
                  <a href="https://cwe.mitre.org/data/definitions/611.html" target="_blank" style={{listStyle:"none", color:"black"}}><li>{ t('CWE-611: Improper Restriction of XML External Entity Reference (\'XXE\')') }</li></a>
                  <a href="https://capec.mitre.org/data/definitions/228.html" style={{listStyle:"none", color:"black"}}><li>{ t('CAPEC-228: DTD Injection') }</li></a>
                </ul>
              </h6>
              <h5 style={{marginLeft: "30px", marginTop:"20px"}}>{t('Typical Severity')}</h5>
              <h6 style={{marginLeft: "30px", fontWeight:"200", marginRight: "30px", textAlign:"justify", textJustify:"inter-word"}}>
               <MDBox ml={-1}>
                <MDBadge badgeContent={t("High")} color="error" variant="gradient" size="lg"/>
               </MDBox>
              </h6>
              <MDBox pt={3}>
                {/* <DataTable
                  table={{ columns: XXEColumns, rows: XXERows }}
                  isSorted={false}
                  entriesPerPage={false}
                  showTotalEntries={false}
                  noEndBorder
                /> */}
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      {/* <Footer /> */}
    </DashboardLayout>
  );
}

export default withAuth(Vulnerability_Details);
