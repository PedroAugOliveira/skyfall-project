const ptBR = {
  translations: {
    // Settings
    'Settings': 'Configurações',
    'Customize your dashboard': 'Customize seu dashboard',
    'Sidenav Type': 'Tipo de barra lateral',
    'Choose between different sidenav types.': 'Escolha entre diferentes tipos de barra lateral.',
    'Dark': 'Escuro',
    'Transparent': 'Transparente',
    'White': 'Branco',
    'Light / Dark': 'Claro / Escuro',
    'Language': 'Idioma',

    //Tools
    'SQL Injection': 'Injeção SQL',
    'What is SQL Injection?': 'O que é Injeção SQL?',
    'SQL injection (SQLi) is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application\'s content or behavior.': 'A injeção SQL (SQLi) é uma vulnerabilidade de segurança na web que permite que um atacante interfira nas consultas que um aplicativo faz ao seu banco de dados. Geralmente permite que um atacante visualize dados que ele não conseguiria normalmente recuperar. Isso pode incluir dados pertencentes a outros usuários ou qualquer outro dado ao qual o aplicativo tenha acesso. Em muitos casos, um atacante pode modificar ou excluir esses dados, causando mudanças persistentes no conteúdo ou comportamento do aplicativo.',
    'What is Union Based SQLi?': 'O que é Injeção SQL Union Based?',
    'In the Union Based SQLi, the attacker uses the UNION operator to combine a benign SQL statement with a malicious statement. The malicious statement must use the same columns and data types as the original statement. A vulnerable database processes the combined statement and executes the malicious code.': 'Na Injeção SQL Baseada em União, o atacante usa o operador UNION para combinar uma instrução SQL benigna com uma instrução maliciosa. A instrução maliciosa deve usar as mesmas colunas e tipos de dados que a instrução original. Um banco de dados vulnerável processa a instrução combinada e executa o código malicioso.',
    'What is Blind SQLi?': 'O que é Injeção Blind SQL?',
    'Blind SQLi is a type of SQL Injection attack that asks the database true or false questions and determines the answer based on the application\'s response. This attack is often used when the web application is configured to show generic error messages, but has not mitigated the code that is vulnerable to SQL injection. When an attacker exploits SQL injection, sometimes the web application displays error messages from the database complaining that the SQL Query’s syntax is incorrect. Blind SQL injection is nearly identical to normal SQL Injection, the only difference being the way the data is retrieved from the database. When the database does not output data to the web page, an attacker is forced to steal data by asking the database a series of true or false questions. This makes exploiting the SQL Injection vulnerability more difficult, but not impossible.': 'A Injeção SQL Cega é um tipo de ataque de Injeção SQL que faz perguntas verdadeiras ou falsas ao banco de dados e determina a resposta com base na resposta da aplicação. Este ataque é frequentemente usado quando a aplicação web está configurada para mostrar mensagens de erro genéricas, mas não mitigou o código que é vulnerável à injeção SQL. Quando um atacante explora a injeção SQL, às vezes a aplicação web exibe mensagens de erro do banco de dados reclamando que a sintaxe da consulta SQL está incorreta. A injeção SQL cega é quase idêntica à Injeção SQL normal, a única diferença é a forma como os dados são recuperados do banco de dados. Quando o banco de dados não emite dados para a página da web, um atacante é forçado a roubar dados fazendo uma série de perguntas verdadeiras ou falsas ao banco de dados. Isso torna a exploração da vulnerabilidade de Injeção SQL mais difícil, mas não impossível.',
    'Vulnerability Classifications': 'Classificações de Vulnerabilidade',
    'CWE-89: Improper Neutralization of Special Elements used in an SQL Command (\'SQL Injection\')': 'CWE-89: Neutralização Inadequada de Elementos Especiais Usados em um Comando SQL (\'Injeção SQL\')',
    'CWE-94: Improper Control of Generation of Code (\'Code Injection\')': 'CWE-94: Controle Inadequado da Geração de Código (\'Injeção de Código\')',
    'CWE-116: Improper Encoding or Escaping of Output': 'CWE-116: Codificação ou Escape Inadequado de Saída',
    'CAPEC-66: SQL Injection': 'CAPEC-66: Injeção SQL',
    'Typical Severity': 'Severidade Típica',
    'High': 'Alta',
    'Cross-Site Scripting': 'Cross-Site Scripting',
    'What is Cross-Site Scripting (XSS)?': 'O que é Cross-Site Scripting (XSS)?',
    'Cross site scripting (XSS) is a common attack vector that injects malicious code into a vulnerable web application. XSS differs from other web attack vectors (e.g., SQL injections), in that it does not directly target the application itself. Instead, the users of the web application are the ones at risk. A successful cross site scripting attack can have devastating consequences for an online business’s reputation and its relationship with its clients. Depending on the severity of the attack, user accounts may be compromised, Trojan horse programs activated and page content modified, misleading users into willingly surrendering their private data. Finally, session cookies could be revealed, enabling a perpetrator to impersonate valid users and abuse their private accounts. Cross site scripting attacks can be broken down into two types: stored and reflected.': 'Cross site scripting (XSS) é um vetor de ataque comum que injeta código malicioso em um aplicativo da web vulnerável. O XSS difere de outros vetores de ataque na web (por exemplo, injeções de SQL), pois não visa diretamente o aplicativo em si. Em vez disso, os usuários do aplicativo da web são os que correm risco. Um ataque bem-sucedido de cross site scripting pode ter consequências devastadoras para a reputação de uma empresa online e seu relacionamento com seus clientes. Dependendo da gravidade do ataque, as contas dos usuários podem ser comprometidas, os programas cavalos de Tróia podem ser ativados e o conteúdo da página modificado, induzindo os usuários a entregar voluntariamente seus dados privados. Finalmente, os cookies de sessão podem ser revelados, permitindo que um criminoso se faça passar por utilizadores válidos e abuse das suas contas privadas. Os ataques de script entre sites podem ser divididos em dois tipos: armazenados e refletidos.',
    'What is Reflected XSS?': 'O que é XSS Refletido?',
    'Reflected cross-site scripting (or non-persistent XSS) arises when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way. Suppose a website has a search function which receives the user-supplied search term in a URL parameter: https://insecure-website.com/search?term=gift The application echoes the supplied search term in the response to this URL: <emp>"You searched for: gift"</emp>. Assuming the application doesn\'t perform any other processing of the data, an attacker can construct an attack like this: https://insecure-website.com/search?term=<script>/*+Bad+stuff+here...+*/</script> This URL results in the following response: "You searched for: Bad stuff here..." If another user of the application requests the attacker\'s URL, then the script supplied by the attacker will execute in the victim user\'s browser, in the context of their session with the application.':'O script entre sites refletido (ou XSS não persistente) surge quando um aplicativo recebe dados em uma solicitação HTTP e inclui esses dados na resposta imediata de maneira insegura. Suponha que um site tenha uma função de pesquisa que receba o termo de pesquisa fornecido pelo usuário em um parâmetro de URL:https://insecure-website.com/search?term=giftO aplicativo ecoa o termo de pesquisa fornecido na resposta a este URL:<emp>"Você pesquisou por: presente"</emp>. Supondo que o aplicativo não realize nenhum outro processamento dos dados, um invasor pode construir um ataque como este: https://insecure-website.com/search?term=<script>/*+Bad+stuff+here.. .+*/</script>Esta URL resulta na seguinte resposta:"Você procurou por: Coisas ruins aqui..." Se outro usuário do aplicativo solicitar a URL do invasor, o script fornecido pelo invasor será executado no navegador do usuário vítima, no contexto de sua sessão com o aplicativo.',
    'What is Stored XSS?': 'O que é XSS Armazenado?',
    'The most damaging type of XSS is Stored XSS (Persistent XSS). An attacker uses Stored XSS to inject malicious content (referred to as the payload), most often JavaScript code, into the target application. If there is no input validation, this malicious code is permanently stored (persisted) by the target application, for example within a database. For example, an attacker may enter a malicious script into a user input field such as a blog comment field or in a forum post. When a victim opens the affected web page in a browser, the XSS attack payload is served to the victim’s browser as part of the HTML code (just like a legitimate comment would). This means that victims will end up executing the malicious script once the page is viewed in their browser.':'O tipo mais prejudicial de XSS é o XSS armazenado (XSS persistente). Um invasor usa XSS armazenado para injetar conteúdo malicioso (chamado de carga útil), geralmente código JavaScript, no aplicativo de destino. Se não houver validação de entrada, esse código malicioso será armazenado permanentemente (persistido) pela aplicação alvo, por exemplo, dentro de um banco de dados. Por exemplo, um invasor pode inserir um script malicioso em um campo de entrada do usuário, como um campo de comentário de um blog ou em uma postagem de fórum. Quando uma vítima abre a página afetada em um navegador, a carga útil do ataque XSS é enviada ao navegador da vítima como parte do código HTML (assim como faria um comentário legítimo). Isso significa que as vítimas acabarão executando o script malicioso assim que a página for visualizada no navegador.',
    'Vulnerability Classifications': 'Classificações de Vulnerabilidade',
    'Typical Severity': 'Severidade Típica',
    'Medium': 'Média',
    'CWE-79: Improper Neutralization of Input During Web Page Generation (\'Cross-site Scripting\')' : 'CWE-79: Neutralização inadequada de entrada durante a geração de páginas web (\'Cross-site Scripting\')',
    'CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (\'Basic XSS\')' : 'CWE-80: Neutralização inadequada de tags HTML relacionadas a scripts em uma página web (\'XSS Básico\')',
    'CWE-83: Improper Neutralization of Script in Attributes in a Web Page' : 'CWE-83: Neutralização inadequada de scripts em atributos em uma página web',
    'CAPEC-63: Cross-site Scripting (XSS)' : 'CAPEC-63: Cross-site Scripting (XSS)',
    'Open Redirect Vulnerability':'Vulnerabilidade de Redirecionamento Aberto',
    'What is Open Redirect Vulnerability?':'O que é vulnerabilidade de redirecionamento aberto?',
    'An open redirect vulnerability occurs when an application allows a user to control a redirect or forward to another URL. If the app does not validate untrusted user input, an attacker could supply a URL that redirects an unsuspecting victim from a legitimate domain to an attacker’s phishing site. Attackers exploit open redirects to add credibility to their phishing attacks. Most users see the legitimate, trusted domain, but do not notice the redirection to the phishing site. Although this vulnerability doesn’t always directly impact the legitimate application, the company\'s reputation can be negatively impacted. In addition, open redirects may not seem like a high impact on the organization itself, it’s important to avoid damaging the trust users have in the business. It’s worth noting, an open redirect in your own site may very well be used against your own employees!':'Uma vulnerabilidade de redirecionamento aberto ocorre quando um aplicativo permite que um usuário controle um redirecionamento ou encaminhe para outro URL. Se o aplicativo não validar a entrada de um usuário não confiável, um invasor poderá fornecer uma URL que redirecione uma vítima inocente de um domínio legítimo para o site de phishing do invasor. Os invasores exploram redirecionamentos abertos para adicionar credibilidade aos seus ataques de phishing. A maioria dos usuários vê o domínio legítimo e confiável, mas não percebe o redirecionamento para o site de phishing. Embora esta vulnerabilidade nem sempre afete diretamente a aplicação legítima, a reputação da empresa pode ser afetada negativamente. Além disso, os redirecionamentos abertos podem não parecer um grande impacto na própria organização, é importante evitar prejudicar a confiança que os usuários têm no negócio. É importante notar que um redirecionamento aberto em seu próprio site pode muito bem ser usado contra seus próprios funcionários!',
    'CWE-601: URL Redirection to Untrusted Site (\'Open Redirect\')':'CWE-601: Redirecionamento de URL para site não confiável (\'Redirecionamento aberto\')',
    'Low':'Baixa',
    'XML External Entity':'Entidade Externa XML',
    'What is XML External Entity (XXE)?':'O que é Entidade Externa XML (XXE)?',
    'XML external entity (XXE) injection vulnerabilities arise when applications process user-supplied XML documents without disabling references to external resources. XML parsers typically support external references by default, even though they are rarely required by applications during normal usage. External entities can reference files on the parser\'s filesystem; exploiting this feature may allow retrieval of arbitrary files, or denial of service by causing the server to read from a file such as /dev/random. External entities can often also reference network resources via the HTTP protocol handler. The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.':'Vulnerabilidades de injeção de entidade externa XML (XXE) surgem quando os aplicativos processam documentos XML fornecidos pelo usuário sem desabilitar referências a recursos externos. Os analisadores XML normalmente suportam referências externas por padrão, embora raramente sejam exigidas pelos aplicativos durante o uso normal. Entidades externas podem fazer referência a arquivos no sistema de arquivos do analisador; explorar esse recurso pode permitir a recuperação de arquivos arbitrários ou a negação de serviço, fazendo com que o servidor leia um arquivo como /dev/random. Muitas vezes, entidades externas também podem fazer referência a recursos de rede por meio do manipulador do protocolo HTTP. A capacidade de enviar solicitações a outros sistemas pode permitir que o servidor vulnerável seja usado como proxy de ataque. Ao enviar cargas adequadas, um invasor pode fazer com que o servidor de aplicativos ataque outros sistemas com os quais ele possa interagir. Isso pode incluir sistemas públicos de terceiros, sistemas internos da mesma organização ou serviços disponíveis no adaptador de loopback local do próprio servidor de aplicativos. Dependendo da arquitetura da rede, isso pode expor serviços internos altamente vulneráveis ​​que de outra forma não seriam acessíveis a invasores externos.',
    'CWE-611: Improper Restriction of XML External Entity Reference (\'XXE\')':'CWE-611: Restrição inadequada de referência de entidade externa XML (\'XXE\')',
    'CAPEC-228: DTD Injection':'CAPEC-228: Injeção DTD',
    "Subdomain Scan": "Escaneamento de Subdomínios",
    "Enter URL to scan": "Digite a URL a ser escaneada",
    "Scan": "Escanear",
    "Invalid URL provided. Please enter a valid URL.": "URL inválida fornecida. Por favor, insira uma URL válida.",
    "Error: ": "Erro: ",
    "IP Address": "Endereço IP",
    "Subdomain": "Subdomínio",
    "Server": "Servidor",
    "Code": "Código",
    "Endpoint Parser": "Analisador de Endpoint",
    "Vulnerability": "Vulnerabilidade",
    "Clear": "Limpar",
    "Open Redirect": "Redirecionamento Aberto",
    "SQLi": "SQLi",
    "SQLi POST": "SQLi POST",
    "XXE": "XXE",
    "XSS": "XSS",
    "Found Endpoints": "Endpoints Encontrados",
    "Total Scans": "Total de Escaneamentos",
    "than last week": "do que na semana passada",
    "Total Users": "Total de Usuários",
    "than last month": "do que no mês passado",
    "Scan ID": "ID do Escaneamento",
    "URL": "URL",
    "Duration": "Duração",
    "Number of Failures": "Número de Falhas",
    "Number of Redirects": "Número de Redirecionamentos",
    "Scan Metrics": "Métricas de Escaneamento",
    "Scan Duration": "Duração do Escaneamento",
    "Deep Scan": "Escaneamento Completo",
    "XML External Entity (XXE)": "Entidade Externa XML (XXE)",
    "SQL injection (SQLi)": "Injeção de SQL (SQLi)",
    "SQLi (POST)": "Injeção de SQL (POST)",
    "Cross-Site Scripting (XSS)": "Script entre Sites (XSS)",
    "Identity": "Identidade",
    "Status Code Match": "Correspondência de Código de Status",
    "Header Match": "Correspondência de Cabeçalho",
    "Body Match": "Correspondência de Corpo",
    "Vulnerable": "Vulnerável",
    "Yes": "Sim",
    "No": "Não",
    "Please select at least one vulnerability.": "Por favor, selecione pelo menos uma vulnerabilidade.",
    "No vulnerability found.": "Nenhuma vulnerabilidade encontrada.",
    "An error occurred. Please try again.": "Ocorreu um erro. Por favor, tente novamente.",
    "Custom Scan": "Escanamento Customizado",
    "Dashboard": "Painel",
    "Sign Out": "Sair",
    "Vulnerability Details": "Detalhes das Vulnerabilidades"
  
  },
};

export default ptBR;
